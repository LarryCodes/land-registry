{
  "language": "Solidity",
  "sources": {
    "contracts/Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\ncontract Registry {\n\n    address private immutable i_owner;\n\n    struct user {\n        address id;\n        string full_name;\n        string user_address;\n        string email;\n        string national_id_number;\n        bool exists;\n    }\n\n    struct landDetails {\n        address payable id;\n        string district;\n        string county;\n        string subcounty;\n        string parish;\n        string village;\n        string survey_code;\n        uint256 market_value;\n        uint256 key;\n        string isGovtApproved;\n        bool isAvailable;\n        bool exists;\n    }\n\n    struct portforlio {\n        uint256[] assetList;\n    }\n\n    address[] users_array;\n    uint256[] assets;\n    uint256[] listed_assets;\n    mapping(address => user) public users;\n    mapping(uint256 => landDetails) public lands;\n    mapping(address => portforlio) profiles;\n    mapping(uint256 => bool) is_listed_asset;\n    // enum reqStatus {Default, Pending, Rejected, Approved}\n\n    constructor() {\n        i_owner = msg.sender;\n    }\n\n    function registerUser(\n        address uid,\n        string memory _full_name,\n        string memory _uemail,\n        string memory _nin,\n        string memory _uaddress\n    ) public returns(bool) {\n        users[uid] = user(\n            uid,\n            _full_name,\n            _uaddress,\n            _uemail,\n            _nin,\n            true\n        );\n        users_array.push(uid);\n        return true;\n    }\n\n    function isAdmin() public view returns (bool) {\n        if (msg.sender == i_owner) {\n            return true;\n        }\n        return false;\n    }\n\n    function getUser(address uid) public view returns(\n        address id,\n        string memory _fullname,\n        string memory _user_address,\n        string memory _email,\n        string memory _nin,\n        bool exists\n    ) {\n\n        if (users[uid].exists) {\n            return (\n                users[uid].id,\n                users[uid].full_name,\n                users[uid].user_address,\n                users[uid].email,\n                users[uid].national_id_number,\n                users[uid].exists\n            );\n        }\n\n    }\n\n    function registerLand(\n        string memory _district,\n        string memory _county,\n        string memory _subcounty,\n        string memory _parish,\n        string memory _village,\n        string memory _survey_code,\n        uint256 _market_value,\n        uint256 _key\n    ) public returns (bool) {\n\n         if(lands[_key].exists) revert(\"Property already exists\");\n\n        lands[_key] = landDetails(\n            payable(msg.sender),\n            _district,\n            _county,\n            _subcounty,\n            _parish,\n            _village,\n            _survey_code,\n            _market_value,\n            _key,\n            \"pending\",\n            false,\n            true\n        );\n        profiles[msg.sender].assetList.push(_key);\n        assets.push(_key);\n        return true;\n    }\n\n    function computeId(\n        string memory _district,\n        string memory _county,\n        string memory _subcounty,\n        string memory _parish,\n        string memory _village,\n        string memory _surveyNumber\n    ) public pure returns(uint256){\n        return uint(keccak256(abi.encodePacked(_district,_county,_subcounty,_parish,_village,_surveyNumber)))%10000000000000;\n    }\n\n    function viewAssets() public view returns (landDetails[] memory) {\n        landDetails[] memory propertyList = new landDetails[](profiles[msg.sender].assetList.length);\n        uint array_count = 0;\n        for (uint256 i = 0; i < profiles[msg.sender].assetList.length; i++) {\n            if(lands[profiles[msg.sender].assetList[i]].exists) {\n                propertyList[array_count] = lands[profiles[msg.sender].assetList[i]];\n                array_count++;\n            }\n        }\n        return propertyList;\n    }\n\n    function allAssets() public view returns (landDetails[] memory) {\n        landDetails[]memory propertyList = new landDetails[](assets.length);\n        uint array_count = 0;\n\n        for (uint256 i = 0; i < assets.length; i++) {\n            if(lands[assets[i]].exists) {\n                propertyList[array_count] = lands[assets[i]];\n                array_count++;\n            }\n        }\n        return propertyList;\n    }\n\n    function govtStatus(\n        uint256 _id,\n        bool status\n    ) public returns (bool) {\n        require(msg.sender == i_owner);\n        lands[_id].isGovtApproved = (status) ? \"approved\" : \"rejected\";\n        return true;\n    }\n\n    function transferLand(\n        uint256 _key,\n        address _new_owner\n    ) public {\n        if(!lands[_key].exists) revert(\"Property not found!\");\n\n        require(lands[_key].id == msg.sender);\n\n        // Detach the asset from the old owner\n        detachAsset(_key, msg.sender);\n\n        // Attach asset to new owner \n        lands[_key].id = payable(_new_owner);\n        profiles[_new_owner].assetList.push(_key);\n\n    }\n\n    function listProperty(uint256 key) public {\n        require(lands[key].id == msg.sender);\n        if (!is_listed_asset[key]) {\n            lands[key].isAvailable = true;\n            listed_assets.push(key);\n            is_listed_asset[key] = true;\n        }\n    }\n\n    function unlistProperty(uint256 key) public {\n        require(lands[key].id == msg.sender);\n        if (is_listed_asset[key]) {\n            lands[key].isAvailable = false;\n            is_listed_asset[key] = false;\n            removeListing(key);\n        }\n    }\n\n    function detachAsset(\n        uint256 key,\n        address owner\n    ) internal {\n        (uint256 _index, bool found) = findProfileAssetIndex(key, owner);\n\n        if (_index >= profiles[owner].assetList.length || !found) return;\n        for (uint256 i = _index; i < profiles[owner].assetList.length-1; i++) {\n            profiles[owner].assetList[i] = profiles[owner].assetList[i+1];\n        }\n        profiles[owner].assetList.pop();\n    }\n\n    function findProfileAssetIndex(uint256 key, address owner) internal view returns(uint256 index, bool found) {\n        for (uint256 i = 0; i < profiles[owner].assetList.length; i++) {\n            if (profiles[owner].assetList[i] == key) {\n                return (i, true);\n            }\n        }\n\n        return (0, false);\n    }\n\n    function removeListing(uint256 key) internal {\n        (uint256 _index, bool found) = findListingIndex(key);\n        if (!found)\n            return;\n\n        if (_index >= listed_assets.length) return;\n        for (uint256 i = _index; i < listed_assets.length-1; i++) {\n            listed_assets[i] = listed_assets[i+1];\n        }\n        listed_assets.pop();\n    }\n\n    function findListingIndex(uint256 key) internal view returns(uint256 index, bool found) {\n        for (uint256 i = 0; i < listed_assets.length; i++) {\n            if (listed_assets[i] == key)\n                return (i, true);\n        }\n\n        return (0, false);\n    }\n\n    function getListedProperties() public view returns(landDetails[] memory){\n        landDetails[]memory propertyList = new landDetails[](listed_assets.length);\n        uint array_count = 0;\n\n        for (uint256 i = 0; i < listed_assets.length; i++) {\n            if(lands[listed_assets[i]].exists && is_listed_asset[listed_assets[i]]) {\n                propertyList[array_count] = lands[listed_assets[i]];\n                array_count++;\n            }\n        }\n        return propertyList;\n    }\n\n    \n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}